swagger: '2.0'
info:
  version: "0.0.1"
  title: shell-test
  description: "Shell Test"
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"
x-functions: 
  authorizer:
    handler: handler.authorizer
    resultTtlInSeconds: 0 # important or the authorizer caches the result - if you're using logout, logged out tokens would still be valid.
  lambdaLogger:
    handler: handler.lambdaLoggerHandler
    #events: ${{file(../scripts/subscribeToLogGroups.js)}}
    role:
      Fn::GetAtt:
        - CloudWatchIAMRole
        - Arn
paths:
  /arrival:
    post:
      summary: add Voyage
      operationId: addVoyageHandler
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/addVoyage'
        - in: header
          name: "x-mock-header"
          required: false
          type: string
          description: Custom header tells the backend to send a mock response based on the value for testing purposes.
          enum: ["ADD_VOYAGE_SUCCESS", "BAD_REQUEST", "INTERNAL_SERVER_ERROR"]            
      responses:
        400:
          description: Bad request or validation errors.
        500:
          description: Internal Server Error
        200:
          description: Voyage logged.
  /history/{captain}:
    get:
      summary: Fetch voyages for captain.
      operationId: getVoyagesHandler
      parameters:
        - in: path
          name: "captain"
          required: true
          type: string
        - in: header
          name: "x-mock-header"
          required: false
          type: string
          description: Custom header tells the backend to send a mock response based on the value for testing purposes.
          enum: ["GET_VOYAGES_SUCCESS", "BAD_REQUEST", "INTERNAL_SERVER_ERROR"]            
      responses:
        400:
          description: Bad request or validation errors
        500:
          description: Internal Server Error
        200:
          description: List of Voyages
          schema:
            $ref: '#/definitions/successGetVoyages'
definitions:
  successGetVoyages:
   type: object
   properties: 
    captain:
      type: string
    trips: 
      type: array
      items:
        type: object
        properties:
          vessel:
            type: string
          from:
            type: string
          to:
            type: string
          fromDate:
            type: string
          toDate:
            type: string
  addVoyage:
   type: object
   properties: 
    vessel:
      type: string
    datetime:
      type: string
    port:
      type: string
    captain:
      type: string      
